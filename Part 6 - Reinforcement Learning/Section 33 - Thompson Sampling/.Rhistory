getwd()
contohArray = c(1,1,2,3,5,8)
ls()
plot(contohArray)
plot(contohArray, type="l")
plot(contohArray, type="h")
plot(contohArray, type="s")
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
require(stats)
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi)
plot(table(rpois(100,5)), type="h", col="red", lwd=10, main = "rpois(100, lambda=5)")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x,cex=.5, col = "dark red")
print(contohArray)
barplot(contohArray, col="darkgreen")
x <- c(7,6,8,5,9,9.5,8.3,7.5)
ls
ls()
y <- c(1.2,1.7,1.5,1.3,1.0,1.4,0.8,1.1)
print(x)
bagus_x <- c(7,8,9,9.5)
bagus_y <- c(1.7,1.3,0.8)
test_x <-(7.5)
test_7 <-(1.1)
test_y <-(1.1)
print(test_x)
print(x)
cls
cls()
print(bagus_x)
ls()
install.packages('devtools')
install.packages('keras')
exit
exit()
#listing program 4.1 latihan produk k-NN dengan R
x <- c(7,6,8,5,9,9.5,8.3,7.5)
y <- c(1.2,1.7,1.5,1.3,1.0,1.4,0.8,1.1)
bagus_x <- c(7,8,9,9.5)
bagus_y <- c(1.2, 1.5, 1.0, 1.4)
test_x <- (7.5)
test_x <- (7.5)
test_y <- (1.1)
merk_bagus <- c('A','C','E','F')
merk_kurang <- c('B','D','G')
merk_test <- c('H')
setwd("D:/Rizky's File/Tutorial/Udemy/Data Science/Machine Learning A-Z/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling")
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling Algorithm
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
for(n in 1: N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n=1,
shape1 = numbers_of_rewards_[i]+1,
shape2 = numbers_of_rewards_0 + 1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_of_selections[ad] = number_of_selections[ad] + 1
reward = dataset[n, ad]
if(reward == 1){
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else{
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Thompson Sampling Algorithm
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling Algorithm
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
for(n in 1: N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n=1,
shape1 = numbers_of_rewards_[i]+1,
shape2 = numbers_of_rewards_0 + 1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
if(reward == 1){
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else{
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
View(dataset)
View(dataset)
# Thompson Sampling Algorithm
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling Algorithm
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
for(n in 1: N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n=1,
shape1 = numbers_of_rewards_[i]+1,
shape2 = numbers_of_rewards_[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
if(reward == 1){
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else{
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Thompson Sampling Algorithm
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling Algorithm
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
for(n in 1: N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n=1,
shape1 = numbers_of_rewards_1[i]+1,
shape2 = numbers_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
if(reward == 1){
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else{
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Thompson Sampling Algorithm
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling Algorithm
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
for(n in 1: N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n=1,
shape1 = numbers_of_rewards_1[i]+1,
shape2 = numbers_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else{
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Thompson Sampling Algorithm
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling Algorithm
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
for(n in 1: N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n=1,
shape1 = numbers_of_rewards_1[i]+1,
shape2 = numbers_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else{
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Thompson Sampling Algorithm
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling Algorithm
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
for(n in 1: N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n=1,
shape1 = numbers_of_rewards_1[i]+1,
shape2 = numbers_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else{
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Visualising the results - Histogram
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
