getwd()
contohArray = c(1,1,2,3,5,8)
ls()
plot(contohArray)
plot(contohArray, type="l")
plot(contohArray, type="h")
plot(contohArray, type="s")
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
require(stats)
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi)
plot(table(rpois(100,5)), type="h", col="red", lwd=10, main = "rpois(100, lambda=5)")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x,cex=.5, col = "dark red")
print(contohArray)
barplot(contohArray, col="darkgreen")
x <- c(7,6,8,5,9,9.5,8.3,7.5)
ls
ls()
y <- c(1.2,1.7,1.5,1.3,1.0,1.4,0.8,1.1)
print(x)
bagus_x <- c(7,8,9,9.5)
bagus_y <- c(1.7,1.3,0.8)
test_x <-(7.5)
test_7 <-(1.1)
test_y <-(1.1)
print(test_x)
print(x)
cls
cls()
print(bagus_x)
ls()
install.packages('devtools')
install.packages('keras')
exit
exit()
#listing program 4.1 latihan produk k-NN dengan R
x <- c(7,6,8,5,9,9.5,8.3,7.5)
y <- c(1.2,1.7,1.5,1.3,1.0,1.4,0.8,1.1)
bagus_x <- c(7,8,9,9.5)
bagus_y <- c(1.2, 1.5, 1.0, 1.4)
test_x <- (7.5)
test_x <- (7.5)
test_y <- (1.1)
merk_bagus <- c('A','C','E','F')
merk_kurang <- c('B','D','G')
merk_test <- c('H')
setwd("D:/Rizky's File/Tutorial/Udemy/Data Science/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
# Data Processing
# Importing Dataset
dataset = read.csv('Data.csv')
# Taking case of missing data
# in Age Column
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
# in Salary Column
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding Categorical Data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(0,1))
# Splitting the dataset into the Trainning set and Testing set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
# Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#training_set[, 2:3] means we only take the column number 2 and 3
# due the the scaling in must in numeric
# colum number 1 and number 4 is still not numeric as we only changed into the categorical as a factor means
# the origin value type still remembered by the machine
